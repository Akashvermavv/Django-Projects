>>> from tags.models import Tag>>> Tag<class 'tags.models.Tag'>>>> Tag.objects.all()<QuerySet [<Tag: Tshirt>, <Tag: T shirt>, <Tag: T-shirt>, <Tag: Red>, <Tag: Black>]>>>> object = Tag.objects.last()>>> object<Tag: Black>>>> dir(object)['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_field_name_clashes', '_check_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_insert', '_do_update', '_get_FIELD_display', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order', '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_save_parents', '_save_table', '_set_pk_val', '_state', 'active', 'check', 'clean', 'clean_fields', 'date_error_message', 'delete', 'from_db', 'full_clean', 'get_deferred_fields', 'get_next_by_timestamp', 'get_previous_by_timestamp', 'id', 'objects', 'pk', 'prepare_database_save', 'products', 'refresh_from_db', 'save', 'save_base', 'serializable_value', 'slug', 'timestamp', 'title', 'unique_error_message', 'validate_unique']>>> object<Tag: Black>>>> object.title'Black'>>> object.slug'black'>>> object.timestampdatetime.datetime(2020, 9, 4, 18, 38, 58, 996263, tzinfo=<UTC>)>>> object.products<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x046E4F10>>>> object.products.all()<ProductQuerySet [<Product: T-shirt>, <Product: Shoes>, <Product: super computer>, <Product: T-shirt>]>>>> object.products.all().first()<Product: T-shirt>>>> obj = object.products.all().first()>>> obj<Product: T-shirt>>>> obj.title'T-shirt'>>> obj.pricTraceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'Product' object has no attribute 'pric'>>> obj.priceDecimal('39.99')>>> obj.iamgeTraceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'Product' object has no attribute 'iamge'>>> obj.image<ImageFieldFile: products/896012/896012.jpg>>>> obj.image.url'/media/products/896012/896012.jpg'>>> obj.featuredFalse>>> obj.description'This is awesome T-shirt'>>> from products.models import Product>>> Product.objects.all()<ProductQuerySet [<Product: T-shirt>, <Product: Shoes>, <Product: super computer>, <Product: T-shirt>, <Product: watch>]>>>> obs = Product.objects.all().first()>>> obs<Product: T-shirt>>>> obs.set_tagTraceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'Product' object has no attribute 'set_tag'>>> obs.tagTraceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'Product' object has no attribute 'tag'>>> obs.tag_set()Traceback (most recent call last):  File "<console>", line 1, in <module>TypeError: __call__() missing 1 required keyword-only argument: 'manager'>>> obs.set_tag()Traceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'Product' object has no attribute 'set_tag'>>> obs.tag_SetTraceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'Product' object has no attribute 'tag_Set'>>> obs.tag_set<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x046F4390>>>> obs.tag_set.all()<QuerySet [<Tag: Tshirt>, <Tag: T-shirt>, <Tag: Black>]>