(env) E:\Machine Learning\FullEcommerceWebsite\ecommerce\src>python manage.py shellPython 3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.(InteractiveConsole)>>> from orders.models import Order>>> Order.objects.all()<OrderManagerQuerySet [<Order: nplk18qgrt>, <Order: 2dsx0snvkt>, <Order: 80patyzibv>, <Order: jur84dcjoz>, <Order: pdg7xfond9>, <Order: 1c16g33rn7>, <Order: pzyphhxumr>, <Order: wwt6euhjoy>, <Order: voq3b9sc8j>, <Order: sjaet2vyub>, <Order: csifa2tzjn>, <Order: di7h99njt7>, <Order: zqvrdzbl8l>, <Order: kaut2zgpoj>, <Order: fwpyw7nanr>, <Order: nl0stbjot6>, <Order: 9o2f0ldrez>, <Order: wc55sg65yv>, <Order: hh33s0aaqa>, <Order: adyygrqq47>, '...(remaining elements truncated)...']>>>> qs = Order.objects.all().count()>>> qTraceback (most recent call last):  File "<console>", line 1, in <module>NameError: name 'q' is not defined>>> qs41>>> qs.count()Traceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'int' object has no attribute 'count'>>> qs.countTraceback (most recent call last):  File "<console>", line 1, in <module>AttributeError: 'int' object has no attribute 'count'>>> qs = Order.objects.all()>>> qs<OrderManagerQuerySet [<Order: nplk18qgrt>, <Order: 2dsx0snvkt>, <Order: 80patyzibv>, <Order: jur84dcjoz>, <Order: pdg7xfond9>, <Order: 1c16g33rn7>, <Order: pzyphhxumr>, <Order: wwt6euhjoy>, <Order: voq3b9sc8j>, <Order: sjaet2vyub>, <Order: csifa2tzjn>, <Order: di7h99njt7>, <Order: zqvrdzbl8l>, <Order: kaut2zgpoj>, <Order: fwpyw7nanr>, <Order: nl0stbjot6>, <Order: 9o2f0ldrez>, <Order: wc55sg65yv>, <Order: hh33s0aaqa>, <Order: adyygrqq47>, '...(remaining elements truncated)...']>>>> qs.count()41>>> from django.db.models import Count,Sum,Avg>>> qs = Order.objects.all().annotate(order_totals = Sum("tota"))Traceback (most recent call last):  File "<console>", line 1, in <module>  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\query.py", line 1056, in annotate    clone.query.add_annotation(annotation, alias, is_summary=False)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1000, in add_annotation    summarize=is_summary)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\aggregates.py", line 47, in resolve_expression    c = super().resolve_expression(query, allow_joins, reuse, summarize)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\expressions.py", line 600, in resolve_expression    c.source_expressions[pos] = arg.resolve_expression(query, allow_joins, reuse, summarize, for_save)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\expressions.py", line 511, in resolve_expression    return query.resolve_ref(self.name, allow_joins, reuse, summarize, simple_col)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1601, in resolve_ref    join_info = self.setup_joins(field_list, self.get_meta(), self.get_initial_alias(), can_reuse=reuse)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1504, in setup_joins    names[:pivot], opts, allow_many, fail_on_missing=True,  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1420, in names_to_path    "Choices are: %s" % (name, ", ".join(available)))django.core.exceptions.FieldError: Cannot resolve keyword 'tota' into field. Choices are: active, billing_address, billing_address_id, billing_profile, billing_profile_id, cart, cart_id, id, order_id, shipping_address, shipping_address_id, shipping_total, status, timestamp, total, updated>>> qs = Order.objects.all().annotate(order_totals = Sum("total"))>>> qs<OrderManagerQuerySet [<Order: nplk18qgrt>, <Order: 2dsx0snvkt>, <Order: 80patyzibv>, <Order: jur84dcjoz>, <Order: pdg7xfond9>, <Order: 1c16g33rn7>, <Order: pzyphhxumr>, <Order: wwt6euhjoy>, <Order: voq3b9sc8j>, <Order: sjaet2vyub>, <Order: csifa2tzjn>, <Order: di7h99njt7>, <Order: zqvrdzbl8l>, <Order: kaut2zgpoj>, <Order: fwpyw7nanr>, <Order: nl0stbjot6>, <Order: 9o2f0ldrez>, <Order: wc55sg65yv>, <Order: hh33s0aaqa>, <Order: adyygrqq47>, '...(remaining elements truncated)...']>>>> dir(qs)['__and__', '__bool__', '__class__', '__deepcopy__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__','__getitem__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__module__', '__ne__', '__new__', '__or__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_add_hints', '_batched_insert', '_chain', '_clone', '_combinator_query', '_create_object_from_params', '_db', '_earliest', '_extract_model_params', '_fetch_all', '_fields', '_filter_or_exclude', '_for_write', '_has_filters', '_hints', '_insert', '_iterable_class', '_iterator', '_known_related_objects', '_merge_known_related_objects', '_merge_sanity_check', '_next_is_sticky', '_populate_pk_values', '_prefetch_done', '_prefetch_related_lookups', '_prefetch_related_objects', '_raw_delete', '_result_cache', '_sticky_filter', '_update', '_validate_values_are_expressions', '_values', 'aggregate', 'all', 'annotate', 'as_manager', 'bulk_create', 'bulk_update', 'by_request', 'by_status', 'complex_filter', 'count', 'create', 'dates', 'datetimes', 'db', 'defer', 'delete', 'difference', 'distinct', 'earliest', 'exclude', 'exists', 'explain', 'extra', 'filter', 'first', 'get', 'get_or_create', 'in_bulk', 'intersection', 'iterator', 'last', 'latest', 'model', 'none', 'not_created', 'not_refunded', 'only', 'order_by', 'ordered', 'prefetch_related', 'query', 'raw', 'recent', 'resolve_expression', 'reverse', 'select_for_update', 'select_related', 'union', 'update', 'update_or_create', 'using', 'values', 'values_list']>>> for i in qs:...     print(i.order_totals)...127.040000000000187.050000000000227.040000000000227.040000000000167.030000000000187.050000000000107.07000000000087.0500000000000167.030000000000127.04000000000087.050000000000087.050000000000087.0500000000000127.040000000000127.040000000000167.030000000000447.040000000000487.030000000000407.050000000000407.050000000000287.050000000000447.040000000000487.030000000000327.040000000000447.040000000000287.050000000000367.060000000000287.050000000000407.050000000000407.050000000000447.040000000000327.040000000000327.040000000000287.050000000000287.050000000000407.050000000000407.050000000000407.050000000000207.020000000000167.030000000000167.030000000000>>> qs = Order.objects.all().annotate(product_total=Sum('cart__products__price'))>>> for i in qs:...     print(i.product_total)...119.970000000000179.980000000000219.970000000000219.970000000000159.960000000000179.98000000000010039.9900000000000119.97000000000079.980000000000079.980000000000079.980000000000079.9800000000000119.970000000000119.970000000000159.960000000000NoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNone199.950000000000159.960000000000159.960000000000>>> for i in qs:...     print(i.product_total,i.total)...119.970000000000 127.04179.980000000000 187.05219.970000000000 227.04219.970000000000 227.04159.960000000000 167.03179.980000000000 187.05100 107.0739.9900000000000 87.05119.970000000000 167.0379.9800000000000 127.0479.9800000000000 87.0579.9800000000000 87.0579.9800000000000 87.05119.970000000000 127.04119.970000000000 127.04159.960000000000 167.03None 447.04None 487.03None 407.05None 407.05None 287.05None 447.04None 487.03None 327.04None 447.04None 287.05None 367.06None 287.05None 407.05None 407.05None 447.04None 327.04None 327.04None 287.05None 287.05None 407.05None 407.05None 407.05199.950000000000 207.02159.960000000000 167.03159.960000000000 167.03>>> qs = Order.objects.all().annotate(product_avg =Avg('cart__products__price'),product_total=Sum('cart__products__price'),product_count=Count('cart__products'))>>> for i in qs:...     print('avg --->',i.product_avg)...     print('total ---->',i.product_total)...     print('count ---->',i.product_count)...avg ---> 39.9900000000000total ----> 119.970000000000count ----> 3avg ---> 59.9933333333333total ----> 179.980000000000count ----> 3avg ---> 54.9925000000000total ----> 219.970000000000count ----> 4avg ---> 54.9925000000000total ----> 219.970000000000count ----> 4avg ---> 39.9900000000000total ----> 159.960000000000count ----> 4avg ---> 59.9933333333333total ----> 179.980000000000count ----> 3avg ---> 100total ----> 100count ----> 1avg ---> 39.9900000000000total ----> 39.9900000000000count ----> 1avg ---> 39.9900000000000total ----> 119.970000000000count ----> 3avg ---> 39.9900000000000total ----> 79.9800000000000count ----> 2avg ---> 39.9900000000000total ----> 79.9800000000000count ----> 2avg ---> 39.9900000000000total ----> 79.9800000000000count ----> 2avg ---> 39.9900000000000total ----> 79.9800000000000count ----> 2avg ---> 39.9900000000000total ----> 119.970000000000count ----> 3avg ---> 39.9900000000000total ----> 119.970000000000count ----> 3avg ---> 39.9900000000000total ----> 159.960000000000count ----> 4avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> Nonetotal ----> Nonecount ----> 0avg ---> 39.9900000000000total ----> 199.950000000000count ----> 5avg ---> 39.9900000000000total ----> 159.960000000000count ----> 4avg ---> 39.9900000000000total ----> 159.960000000000count ----> 4>>> qs = Order.objects.all().annotate(product_avg =Avg('cart__products__price'),product_total=Sum('cart__products__price'),product_count=Count('cart__products'))        print(i.product_total)  File "<console>", line 1    print(i.product_total)    ^IndentationError: unexpected indent>>>>>> qs = Order.objects.all().aggregate(Sum("total"))>>> qs{'total__sum': Decimal('11228.7800000000')}>>> qs = Order.objects.all().aggregate(Sum("total"))>>> qs{'total__sum': Decimal('11355.8200000000')}>>> qs = Order.objects.all().aggregate(Sum("total"),Avg("total"),Avg("cart__product__price"),Count("cart__products"))Traceback (most recent call last):  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1522, in transform    return self.try_transform(wrapped, name)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1151, in try_transform    "permitted%s" % (name, output_field.__name__, suggestion)django.core.exceptions.FieldError: Unsupported lookup 'product' for AutoField or join on the field not permitted.During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "<console>", line 1, in <module>  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\query.py", line 376, in aggregate    query.add_annotation(aggregate_expr, alias, is_summary=True)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1000, in add_annotation    summarize=is_summary)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\aggregates.py", line 47, in resolve_expression    c = super().resolve_expression(query, allow_joins, reuse, summarize)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\expressions.py", line 600, in resolve_expression    c.source_expressions[pos] = arg.resolve_expression(query, allow_joins, reuse, summarize, for_save)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\expressions.py", line 511, in resolve_expression    return query.resolve_ref(self.name, allow_joins, reuse, summarize, simple_col)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1610, in resolve_ref    join_info.transform_function(targets[0], final_alias)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1526, in transform    raise last_field_exception  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1521, in transform    wrapped = previous(field, alias)  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1526, in transform    raise last_field_exception  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1504, in setup_joins    names[:pivot], opts, allow_many, fail_on_missing=True,  File "E:\Machine Learning\FullEcommerceWebsite\ecommerce\env\lib\site-packages\django\db\models\sql\query.py", line 1420, in names_to_path    "Choices are: %s" % (name, ", ".join(available)))django.core.exceptions.FieldError: Cannot resolve keyword 'product' into field. Choices are: id, order, products, subtotal, timestamp, total, total__avg, total__sum, updated, user, user_id>>> qs = Order.objects.all().aggregate(Sum("total"),Avg("total"),Avg("cart__products__price"),Count("cart__products"))>>> qs{'total__sum': Decimal('18037.2700000000'), 'total__avg': Decimal('219.966707317073'), 'cart__products__price__avg': Decimal('44.9908333333333'), 'cart__products__count': 60}>>>