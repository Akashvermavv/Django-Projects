from django.db.models import Q# from rest_framework.pagination import (LimitOffsetPagination,PageNumberPagination)from rest_framework.filters import (                                    SearchFilter,                                    OrderingFilter                                    )from rest_framework.generics import  (                                        ListAPIView,                                        RetrieveAPIView,                                        DestroyAPIView,                                        UpdateAPIView,                                        CreateAPIView,RetrieveUpdateAPIView                                        )from rest_framework.permissions import (                                        IsAdminUser,                                        IsAuthenticated,                                        IsAuthenticatedOrReadOnly,                                        AllowAny                                    )from .pagination import PostLimitOffsetPagination,PostPageNumberPagination# from ..models import Postfrom posts.models import Postfrom .permissions import IsOwnerOrReadOnlyfrom .serializers import (                          PostDetailSerializer,                          PostListSerializer,                          PostCreateUpdateSerializer,                          )class PostCreateAPIView(CreateAPIView):    queryset = Post.objects.all()    serializer_class = PostCreateUpdateSerializer    # permission_classes = [IsAuthenticated,]    # lookup_field = 'slug'    def perform_create(self, serializer):        serializer.save(user=self.request.user)class PostDetailAPIView(RetrieveAPIView):    queryset = Post.objects.all()    serializer_class = PostDetailSerializer    permission_classes = [AllowAny]    lookup_field = 'slug'    # lookup_url_kwarg = 'slug'# class PostUpdateAPIView(UpdateAPIView):#     queryset = Post.objects.all()#     serializer_class = PostDetailSerializer#class PostUpdateAPIView(RetrieveUpdateAPIView):    queryset = Post.objects.all()    serializer_class = PostCreateUpdateSerializer    lookup_field = 'slug'    permission_classes = [IsOwnerOrReadOnly ]    # lookup_url_kwarg = 'slug'    def perform_update(self, serializer):        serializer.save(user=self.request.user)class PostDeleteAPIView(DestroyAPIView):    queryset = Post.objects.all()    serializer_class = PostDetailSerializer    lookup_field = 'slug'    permission_classes = [IsOwnerOrReadOnly]    # lookup_url_kwarg = 'slug'class PostListAPIView(ListAPIView):    # queryset = Post.objects.all()    serializer_class =  PostListSerializer    filter_backends = [SearchFilter,OrderingFilter]    # authentication_classes = [AllowAny]    search_fields = ['title','content','user__first_name']    pagination_class = PostPageNumberPagination#PostLimitOffsetPagination #LimitOffsetPagination #PageNumberPagination    def get_queryset(self,*args,**kwargs):        # queryset_list = super(PostListAPIView,self).get_queryset(*args,**kwargs)        queryset_list = Post.objects.all()        query = self.request.GET.get("q")        print('len before --',len(queryset_list))        if query:            queryset_list = queryset_list.filter(                    Q(title__icontains=query) |                    Q(content__icontains=query) |                    Q(user__first_name__icontains=query) |                    Q(user__last_name__icontains=query)            ).distinct()        print('len after --', len(queryset_list))        return queryset_list